import { ref, reactive } from 'vue';
import mapService from '../services/mapService.js';

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã
// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è–º–∏ –≤–∫–ª–∞–¥–æ–∫
const mapState = reactive({
  isInitialized: false,
  center: [49.9935, 36.2304], // –•–∞—Ä—å–∫–æ–≤
  zoom: 12,
  selectedStreet: null,
  selectedStreetGeometry: null,
  highlightedStreetLayer: null
});

// –°–æ–±—ã—Ç–∏–π–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const eventCallbacks = {
  streetCleared: []
};

const mapInstance = ref(null);

/**
 * Composable –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç—ã
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
 */
export function useMapState() {
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  const initMapWithState = async () => {
    try {
      console.log('üó∫Ô∏è MapState: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è...');

      // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ DOM –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–∑–º–µ–Ω–∏–ª—Å—è - –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º
      const mapElement = document.getElementById('map');
      if (mapState.isInitialized && mapService.map) {
        const currentContainer = mapService.map.getContainer();

        // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
        if (!currentContainer || currentContainer !== mapElement) {
          console.log('MapState: DOM –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É...');
          mapService.destroyMap();
        } else {
          console.log(
            'MapState: –ö–∞—Ä—Ç–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ...'
          );
          await restoreMapState();
          await waitForMapReady();
          return mapService.map;
        }
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É —Å—Ä–∞–∑—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
      const initialCenter = mapState.isInitialized ? mapState.center : null;
      const initialZoom = mapState.isInitialized ? mapState.zoom : null;

      const map = await mapService.initMap(0, initialCenter, initialZoom);
      mapInstance.value = map;

      // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã
      await waitForMapReady();

      if (mapState.isInitialized) {
        console.log(
          `üó∫Ô∏è MapState: –ö–∞—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π: ${mapState.center}, –∑—É–º: ${mapState.zoom}`
        );
      }

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É–ª–∏—Ü—É
      if (mapState.selectedStreet && mapState.selectedStreetGeometry) {
        console.log(`üó∫Ô∏è MapState: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–ª–∏—Ü—É: ${mapState.selectedStreet}`);
        mapService.highlightStreet(mapState.selectedStreetGeometry);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
      map.on('moveend', saveMapPosition);
      map.on('zoomend', saveMapPosition);

      mapState.isInitialized = true;
      console.log('MapState: –ö–∞—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º');

      return map;
    } catch (error) {
      console.error('MapState: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', error);
      throw error;
    }
  };

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã
   */
  const waitForMapReady = async (maxAttempts = 10) => {
    for (let i = 0; i < maxAttempts; i++) {
      if (mapService.isMapReady()) {
        console.log('MapState: –ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
        return true;
      }

      console.log(
        `MapState: –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã (–ø–æ–ø—ã—Ç–∫–∞ ${i + 1}/${maxAttempts})...`
      );
      await new Promise(resolve => setTimeout(resolve, 100));

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã
      if (mapService.map) {
        mapService.map.invalidateSize();
      }
    }

    console.warn('‚ö†Ô∏è MapState: –ö–∞—Ä—Ç–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è');
    return false;
  };

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –∏ –∑—É–º–∞ –∫–∞—Ä—Ç—ã
   */
  const saveMapPosition = () => {
    if (mapService.map) {
      const center = mapService.map.getCenter();
      const zoom = mapService.map.getZoom();

      mapState.center = [center.lat, center.lng];
      mapState.zoom = zoom;

      console.log(
        `üíæ MapState: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: [${center.lat.toFixed(4)}, ${center.lng.toFixed(4)}], –∑—É–º: ${zoom}`
      );
    }
  };

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç—ã
   */
  const restoreMapState = async () => {
    if (!mapService.map) return;

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
    mapService.setViewInstant(mapState.center, mapState.zoom);

    console.log(
      `MapState: –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: ${mapState.center}, –∑—É–º: ${mapState.zoom}`
    );

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É–ª–∏—Ü—É
    if (mapState.selectedStreet && mapState.selectedStreetGeometry) {
      mapService.highlightStreet(mapState.selectedStreetGeometry);
    }
  };

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É–ª–∏—Ü—ã
   */
  const saveSelectedStreet = (streetName, geometry) => {
    mapState.selectedStreet = streetName;
    mapState.selectedStreetGeometry = geometry;
    console.log(`üíæ MapState: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —É–ª–∏—Ü–∞: ${streetName}`);
  };

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É–ª–∏—Ü—ã
   */
  const clearSelectedStreet = () => {
    mapState.selectedStreet = null;
    mapState.selectedStreetGeometry = null;

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–± –æ—á–∏—Å—Ç–∫–µ —É–ª–∏—Ü—ã
    eventCallbacks.streetCleared.forEach(callback => {
      try {
        callback();
      } catch (error) {
        console.error('MapState: –û—à–∏–±–∫–∞ –≤ callback streetCleared:', error);
      }
    });

    console.log('üóëÔ∏è MapState: –û—á–∏—â–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —É–ª–∏—Ü–∞');
  };

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –æ—á–∏—Å—Ç–∫–∏ —É–ª–∏—Ü—ã
   */
  const onStreetCleared = callback => {
    eventCallbacks.streetCleared.push(callback);
    console.log('üì° MapState: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—á–∏—Å—Ç–∫—É —É–ª–∏—Ü—ã');
  };

  /**
   * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è –æ—á–∏—Å—Ç–∫–∏ —É–ª–∏—Ü—ã
   */
  const offStreetCleared = callback => {
    const index = eventCallbacks.streetCleared.indexOf(callback);
    if (index > -1) {
      eventCallbacks.streetCleared.splice(index, 1);
      console.log('üì° MapState: –£–¥–∞–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—á–∏—Å—Ç–∫—É —É–ª–∏—Ü—ã');
    }
  };

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç—ã
   */
  const getMapState = () => {
    return {
      isInitialized: mapState.isInitialized,
      center: [...mapState.center],
      zoom: mapState.zoom,
      selectedStreet: mapState.selectedStreet,
      hasSelectedStreet: !!mapState.selectedStreet
    };
  };

  /**
   * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç—ã –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É
   */
  const resetMapState = () => {
    mapState.center = [49.9935, 36.2304];
    mapState.zoom = 12;
    mapState.selectedStreet = null;
    mapState.selectedStreetGeometry = null;

    if (mapService.map) {
      // –°–±—Ä–æ—Å –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
      mapService.setViewInstant(mapState.center, mapState.zoom);
      mapService.clearHighlightedStreet();
    }

    console.log('MapState: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å–±—Ä–æ—à–µ–Ω–æ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏');
  };

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    mapState: mapState,

    // –ú–µ—Ç–æ–¥—ã
    initMapWithState,
    saveMapPosition,
    restoreMapState,
    saveSelectedStreet,
    clearSelectedStreet,
    getMapState,
    resetMapState,

    // –°–æ–±—ã—Ç–∏—è
    onStreetCleared,
    offStreetCleared
  };
}
