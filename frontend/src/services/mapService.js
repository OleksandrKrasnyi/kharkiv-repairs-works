// –ò–º–ø–æ—Ä—Ç Leaflet
import L from 'leaflet';

// –ò–º–ø–æ—Ä—Ç CSS —Å—Ç–∏–ª–µ–π Leaflet
import 'leaflet/dist/leaflet.css';

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ Leaflet (–ø—Ä–æ–±–ª–µ–º–∞ —Å webpack/vite)
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl:
    'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.3/images/marker-icon-2x.png',
  iconUrl:
    'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.3/images/marker-icon.png',
  shadowUrl:
    'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.3/images/marker-shadow.png'
});

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Leaflet –∫–∞—Ä—Ç–æ–π
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ–π, –º–∞—Ä–∫–µ—Ä–∞–º–∏, —Å–ª–æ—è–º–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
const MAP_CONFIG = {
  DEFAULT_CENTER: [49.9935, 36.2304], // –•–∞—Ä—å–∫–æ–≤
  DEFAULT_ZOOM: 12,
  TILE_LAYER_URL: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
  TILE_LAYER_OPTIONS: {
    maxZoom: 19,
    attribution: '¬© OpenStreetMap contributors'
  },
  RETRY_ATTEMPTS: 3,
  RETRY_DELAY: 500
};

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Leaflet –∫–∞—Ä—Ç–æ–π
 */
class MapService {
  constructor(containerId = 'map') {
    this.containerId = containerId;
    this.map = null;
    this.tempMarkers = [];
    this.workMarkers = [];
    this.highlightedStreet = null;
    this.selectedSegmentLayer = null;
    this.selectedSegmentPopup = null;

    // Callback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π
    this.onMapClickCallback = null;
    this.onMapReadyCallback = null;
    this.lastClickedPoint = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
   */
  async initMap(retryCount = 0, initialCenter = null, initialZoom = null) {
    try {
      const mapElement = document.getElementById(this.containerId);
      if (!mapElement) {
        if (retryCount < MAP_CONFIG.RETRY_ATTEMPTS) {
          await this.delay(MAP_CONFIG.RETRY_DELAY);
          return this.initMap(retryCount + 1);
        }
        throw new Error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã —Å ID "${this.containerId}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      if (typeof L === 'undefined') {
        throw new Error('Leaflet –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
      }

      // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ—ë
      if (this.map) {
        this.destroyMap();
      }

      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ –ø–ª–∞–≤–Ω—ã–º –∑—É–º–æ–º
      const center = initialCenter || MAP_CONFIG.DEFAULT_CENTER;
      const zoom = initialZoom || MAP_CONFIG.DEFAULT_ZOOM;

      this.map = L.map(this.containerId, {
        // –í–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        zoomAnimation: true, // –ü–ª–∞–≤–Ω—ã–π –∑—É–º –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏
        fadeAnimation: true, // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ç–∞–π–ª–æ–≤
        markerZoomAnimation: true, // –ê–Ω–∏–º–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ –ø—Ä–∏ –∑—É–º–µ
        zoomAnimationThreshold: 4, // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑—É–º–∞ –¥–æ 4 —É—Ä–æ–≤–Ω–µ–π
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ –∑—É–º–∞
        wheelPxPerZoomLevel: 60, // –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–ª–µ—Å–∏–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60)
        wheelDebounceTime: 40 // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏ –∫–æ–ª–µ—Å–∏–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 40)
      }).setView(center, zoom, {
        animate: false, // –ë–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ –¢–û–õ–¨–ö–û –ø—Ä–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ
        duration: 0 // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π —Ç–∞–π–ª–æ–≤
      L.tileLayer(MAP_CONFIG.TILE_LAYER_URL, MAP_CONFIG.TILE_LAYER_OPTIONS).addTo(
        this.map
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
      this.map.on('click', e => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–∏–∫ –¥–ª—è getCurrentPoint
        this.lastClickedPoint = { lat: e.latlng.lat, lng: e.latlng.lng };

        if (this.onMapClickCallback) {
          this.onMapClickCallback(e);
        }
      });

      // –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –µ—Å—Ç—å
      if (this.onMapReadyCallback) {
        this.onMapReadyCallback();
      }

      return this.map;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', error);

      if (retryCount < MAP_CONFIG.RETRY_ATTEMPTS) {
        await this.delay(MAP_CONFIG.RETRY_DELAY * (retryCount + 1));
        return this.initMap(retryCount + 1, initialCenter, initialZoom);
      }

      throw error;
    }
  }

  /**
   * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
   */
  destroyMap() {
    if (this.map) {
      this.clearAllMarkers();
      this.clearHighlightedStreet();
      this.clearSelectedSegment();
      this.map.remove();
      this.map = null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã
   */
  isMapReady() {
    const isReady = this.map !== null;
    if (isReady) {
      const container = this.map.getContainer();
      return container && container.offsetWidth > 0 && container.offsetHeight > 0;
    }
    return false;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
   */
  invalidateSize() {
    if (this.map) {
      this.map.invalidateSize();
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
   */
  setMapClickCallback(callback) {
    this.onMapClickCallback = callback;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –¥–ª—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã
   */
  setMapReadyCallback(callback) {
    this.onMapReadyCallback = callback;
  }

  // ===== –ú–ê–†–ö–ï–†–´ –†–ê–ë–û–¢ =====

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–±–æ—Ç –Ω–∞ –∫–∞—Ä—Ç—É
   */
  async addAllWorksToMap(repairWorks) {
    console.log(
      `üìç MapService: –ó–∞–≥—Ä—É–∑–∫–∞ ${repairWorks?.length || 0} —Ä–∞–±–æ—Ç –Ω–∞ –∫–∞—Ä—Ç—É...`
    );

    // Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã
    if (!(await this.waitForMapReady())) {
      console.warn(
        '‚ö†Ô∏è MapService: –ö–∞—Ä—Ç–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–∞–±–æ—Ç'
      );
      return;
    }

    // Get current work IDs on map
    const currentWorkIds = this.workMarkers.map(wm => wm.id);
    const newWorkIds = repairWorks.map(work =>
      typeof work.id === 'string' ? parseInt(work.id, 10) : work.id
    );

    // Remove markers for works that are no longer in the list
    const workIdsToRemove = currentWorkIds.filter(id => !newWorkIds.includes(id));
    if (workIdsToRemove.length > 0) {
      workIdsToRemove.forEach(workId => {
        this.removeWorkFromMap(workId);
      });
    }

    // Add markers for new works
    repairWorks.forEach(work => {
      this.addWorkToMap(work);
    });
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã —Å retry
   */
  async waitForMapReady(maxAttempts = 10) {
    for (let i = 0; i < maxAttempts; i++) {
      if (this.isMapReady()) {
        console.log('MapService: –ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–±–æ—Ç');
        return true;
      }

      console.log(
        `MapService: –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã (–ø–æ–ø—ã—Ç–∫–∞ ${i + 1}/${maxAttempts})...`
      );
      await this.delay(100);

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã
      if (this.map) {
        this.map.invalidateSize();
      }
    }

    return false;
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞ –∫–∞—Ä—Ç—É
   */
  addWorkToMap(work) {
    if (!this.isMapReady()) {
      return;
    }

    // Ensure ID is normalized for consistent comparison
    const workId = typeof work.id === 'string' ? parseInt(work.id, 10) : work.id;

    // Check if marker already exists
    const existingMarkerIndex = this.workMarkers.findIndex(wm => wm.id === workId);
    if (existingMarkerIndex !== -1) {
      return;
    }

    const popupContent = this.createPopupContent(work);
    let marker;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞–±–æ—Ç—ã –ø–æ –Ω–∞–ª–∏—á–∏—é –¥–∞–Ω–Ω—ã—Ö
    const isPointWork =
      work.location || (work.latitude != null && work.longitude != null);

    if (isPointWork) {
      marker = this.createPointMarker(work, popupContent);
    } else {
      marker = this.createRouteMarker(work, popupContent);
    }

    if (marker) {
      this.workMarkers.push({
        id: workId,
        marker: marker
      });
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–µ—á–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
   */
  createPointMarker(work, popupContent) {
    const color = work.work_type ? work.work_type.color : '#667eea';
    let lat, lng;

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    if (work.latitude != null && work.longitude != null) {
      lat = work.latitude;
      lng = work.longitude;
    } else if (work.location && typeof work.location === 'string') {
      const coords = work.location.split(',').map(coord => parseFloat(coord.trim()));
      if (coords.length === 2 && !isNaN(coords[0]) && !isNaN(coords[1])) {
        lat = coords[0];
        lng = coords[1];
      }
    }

    if (lat == null || lng == null || isNaN(lat) || isNaN(lng)) {
      return null;
    }

    return L.marker([lat, lng], {
      icon: L.divIcon({
        className: 'work-marker point',
        html: `<div style="background: ${color}; width: 20px; height: 20px; border-radius: 50%; border: 3px solid white; box-shadow: 0 2px 8px rgba(0,0,0,0.3);"></div>`,
        iconSize: [20, 20],
        iconAnchor: [10, 10]
      })
    })
      .bindPopup(popupContent)
      .addTo(this.map);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ –∏–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ —É–ª–∏—Ü—ã
   */
  createRouteMarker(work, popupContent) {
    const color = work.work_type ? work.work_type.color : '#667eea';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ GeoJSON –≥–µ–æ–º–µ—Ç—Ä–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ —É–ª–∏—Ü—ã
    if (work.street_segment_geojson) {
      try {
        const segmentGeoJSON = JSON.parse(work.street_segment_geojson);

        const { coordinates } = segmentGeoJSON.geometry;
        const latlngs = coordinates.map(coord => [coord[1], coord[0]]);

        const segmentLine = L.polyline(latlngs, {
          color: color,
          weight: 6,
          opacity: 0.8,
          className: 'street-segment-work',
          lineCap: 'round',
          lineJoin: 'round'
        })
          .bindPopup(popupContent)
          .addTo(this.map);

        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–∏–Ω–∏—é —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (latlngs.length > 0) {
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏–Ω–∏—é —Å–µ–≥–º–µ–Ω—Ç–∞ –±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤
          return segmentLine;
        }

        return segmentLine;
      } catch {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ GeoJSON
      }
    }

    // –û–±—ã—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
    return this.createSimpleRoute(work, color, popupContent);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
   */
  createSimpleRoute(work, color, popupContent) {
    let startLat, startLng, endLat, endLng;

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞
    if (
      work.start_latitude != null &&
      work.start_longitude != null &&
      work.end_latitude != null &&
      work.end_longitude != null
    ) {
      startLat = work.start_latitude;
      startLng = work.start_longitude;
      endLat = work.end_latitude;
      endLng = work.end_longitude;
    } else if (work.start_location && work.end_location) {
      const startCoords = work.start_location
        .split(',')
        .map(coord => parseFloat(coord.trim()));
      const endCoords = work.end_location
        .split(',')
        .map(coord => parseFloat(coord.trim()));

      if (
        startCoords.length === 2 &&
        endCoords.length === 2 &&
        !isNaN(startCoords[0]) &&
        !isNaN(startCoords[1]) &&
        !isNaN(endCoords[0]) &&
        !isNaN(endCoords[1])
      ) {
        startLat = startCoords[0];
        startLng = startCoords[1];
        endLat = endCoords[0];
        endLng = endCoords[1];
      }
    }

    if (
      startLat == null ||
      startLng == null ||
      endLat == null ||
      endLng == null ||
      isNaN(startLat) ||
      isNaN(startLng) ||
      isNaN(endLat) ||
      isNaN(endLng)
    ) {
      return null;
    }

    // –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏—é –º–∞—Ä—à—Ä—É—Ç–∞
    const routeLine = L.polyline(
      [
        [startLat, startLng],
        [endLat, endLng]
      ],
      {
        color: color,
        weight: 4,
        opacity: 0.8
      }
    )
      .bindPopup(popupContent)
      .addTo(this.map);

    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–∏–Ω–∏—é –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

    return routeLine;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è popup
   */
  createPopupContent(work) {
    const workType = work.work_type ? work.work_type.name : '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø';
    const startDate = this.formatDateTime(work.start_datetime);
    const endDate = work.end_datetime
      ? this.formatDateTime(work.end_datetime)
      : '—Ç—Ä–∏–≤–∞—î';

    let location = '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
    try {
      location = this.getWorkLocation(work) || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
    } catch {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    }

    return `
      <div class="popup-content">
        <h4><i class="fas fa-tools"></i> ${work.description || '–†–µ–º–æ–Ω—Ç–Ω—ñ —Ä–æ–±–æ—Ç–∏'}</h4>
        <p><strong>–¢–∏–ø:</strong> ${workType}</p>
        <p><strong>–ü–µ—Ä—ñ–æ–¥:</strong> ${startDate} - ${endDate}</p>
        <p><strong>–ú—ñ—Å—Ü–µ:</strong> ${location}</p>
      </div>
    `;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  getWorkLocation(work) {
    // –°–µ–≥–º–µ–Ω—Ç —É–ª–∏—Ü—ã
    if (work.street_name && work.street_segment_geojson) {
      return `üõ£Ô∏è ${work.street_name} (—Å–µ–≥–º–µ–Ω—Ç)`;
    }

    // –¢–æ—á–µ—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    const isPointWork =
      work.location || (work.latitude != null && work.longitude != null);
    if (isPointWork) {
      if (work.latitude != null && work.longitude != null) {
        return `${work.latitude.toFixed(4)}, ${work.longitude.toFixed(4)}`;
      } else if (work.location && typeof work.location === 'string') {
        const coords = work.location.split(',').map(coord => coord.trim());
        if (coords.length === 2) {
          const lat = parseFloat(coords[0]);
          const lng = parseFloat(coords[1]);
          if (!isNaN(lat) && !isNaN(lng)) {
            return `${lat.toFixed(4)}, ${lng.toFixed(4)}`;
          }
        }
        return work.location;
      }
    }

    // –ú–∞—Ä—à—Ä—É—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    const isSectionWork =
      work.start_location ||
      (work.start_latitude != null && work.start_longitude != null);
    if (isSectionWork) {
      if (
        work.start_latitude != null &&
        work.start_longitude != null &&
        work.end_latitude != null &&
        work.end_longitude != null
      ) {
        return `${work.start_latitude.toFixed(4)}, ${work.start_longitude.toFixed(4)} ‚Üí ${work.end_latitude.toFixed(4)}, ${work.end_longitude.toFixed(4)}`;
      } else if (work.start_location && work.end_location) {
        return `${work.start_location} ‚Üí ${work.end_location}`;
      }
    }

    return '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç—ã
   */
  removeWorkFromMap(workId) {
    // Normalize workId to number for consistent comparison
    const normalizedWorkId = typeof workId === 'string' ? parseInt(workId, 10) : workId;

    if (!this.isMapReady()) {
      return false;
    }

    // Try both strict and loose comparison for safety
    let workMarkerIndex = this.workMarkers.findIndex(wm => wm.id === normalizedWorkId);
    if (workMarkerIndex === -1) {
      // Try string comparison as fallback
      workMarkerIndex = this.workMarkers.findIndex(
        wm => wm.id.toString() === workId.toString()
      );
    }

    if (workMarkerIndex !== -1) {
      const workMarker = this.workMarkers[workMarkerIndex];

      if (workMarker.marker && this.map) {
        // Handle LayerGroup (for complex markers like street segments)
        if (workMarker.marker instanceof L.LayerGroup) {
          // Remove each layer individually first
          workMarker.marker.eachLayer(layer => {
            if (this.map.hasLayer(layer)) {
              this.map.removeLayer(layer);
            }
          });

          // Clear and remove the group
          workMarker.marker.clearLayers();
          if (this.map.hasLayer(workMarker.marker)) {
            this.map.removeLayer(workMarker.marker);
          }
        } else if (this.map.hasLayer(workMarker.marker)) {
          this.map.removeLayer(workMarker.marker);
        }

        // Force remove marker reference
        workMarker.marker = null;
      }

      this.workMarkers.splice(workMarkerIndex, 1);
      return true;
    }

    return false;
  }

  // ===== –í–†–ï–ú–ï–ù–ù–´–ï –ú–ê–†–ö–ï–†–´ =====

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
   */
  addTempMarker(latlng, options = {}) {
    if (!this.isMapReady()) return null;

    const defaultOptions = {
      icon: L.divIcon({
        className: 'temp-marker',
        html: '<div style="background: #4CAF50; width: 16px; height: 16px; border-radius: 50%; border: 3px solid white; box-shadow: 0 2px 8px rgba(0,0,0,0.3);"></div>',
        iconSize: [16, 16],
        iconAnchor: [8, 8]
      })
    };

    const marker = L.marker(latlng, { ...defaultOptions, ...options }).addTo(this.map);
    this.tempMarkers.push(marker);
    return marker;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
   */
  clearTempMarkers() {
    this.tempMarkers.forEach(marker => {
      if (this.map && this.map.hasLayer(marker)) {
        this.map.removeLayer(marker);
      }
    });
    this.tempMarkers = [];
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç
   */
  clearWorkMarkers() {
    this.workMarkers.forEach(workMarker => {
      if (workMarker.marker && this.map && this.map.hasLayer(workMarker.marker)) {
        this.map.removeLayer(workMarker.marker);
      }
    });
    this.workMarkers = [];
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
   */
  clearAllMarkers() {
    this.clearTempMarkers();
    this.clearWorkMarkers();
  }

  // ===== –ü–û–î–°–í–ï–¢–ö–ê –£–õ–ò–¶ =====

  /**
   * –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —É–ª–∏—Ü—ã –ø–æ –≥–µ–æ–º–µ—Ç—Ä–∏–∏
   */
  highlightStreet(geometry) {
    if (!this.isMapReady()) return;

    this.clearHighlightedStreet();

    if (geometry.segments && geometry.segments.length > 0) {
      // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
      const streetGroup = L.layerGroup();

      geometry.segments.forEach(segmentCoords => {
        if (segmentCoords.length >= 2) {
          const segmentLine = L.polyline(segmentCoords, {
            color: '#ff6b6b',
            weight: 5,
            opacity: 0.9,
            className: 'highlighted-street',
            smoothFactor: 1.0,
            lineCap: 'round',
            lineJoin: 'round'
          });
          streetGroup.addLayer(segmentLine);
        }
      });

      streetGroup.addTo(this.map);
      this.highlightedStreet = streetGroup;

      // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ü–µ–Ω—Ç—Ä–æ–≤–∫–∞ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
      this.fitBoundsForSegments(geometry.segments);
    } else if (geometry.coordinates && geometry.coordinates.length > 0) {
      // –û–¥–∏–Ω–æ—á–Ω–∞—è –ª–∏–Ω–∏—è
      const streetLine = L.polyline(geometry.coordinates, {
        color: '#ff6b6b',
        weight: 5,
        opacity: 0.9,
        className: 'highlighted-street',
        smoothFactor: 1.0,
        lineCap: 'round',
        lineJoin: 'round'
      });

      streetLine.addTo(this.map);
      this.highlightedStreet = streetLine;

      // –ü–æ–¥–≥–æ–Ω—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–¥ —É–ª–∏—Ü—É
      this.fitBounds(geometry.coordinates);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —É–ª–∏—Ü—ã
   */
  clearHighlightedStreet() {
    if (this.highlightedStreet && this.map) {
      if (this.highlightedStreet instanceof L.LayerGroup) {
        this.highlightedStreet.clearLayers();
      }
      this.map.removeLayer(this.highlightedStreet);
      this.highlightedStreet = null;
    }
  }

  // ===== –°–ï–ì–ú–ï–ù–¢–´ =====

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
   */
  displayCalculatedSegment(calculatedSegment) {
    if (
      !calculatedSegment ||
      !calculatedSegment.segment_geojson ||
      !this.isMapReady()
    ) {
      return;
    }

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç
    this.clearSelectedSegment();

    const segmentCoords = calculatedSegment.segment_geojson.geometry.coordinates;
    const latLngCoords = segmentCoords.map(coord => [coord[1], coord[0]]);

    this.selectedSegmentLayer = L.polyline(latLngCoords, {
      color: '#ff6b6b',
      weight: 8,
      opacity: 0.9,
      className: 'selected-segment',
      lineCap: 'round',
      lineJoin: 'round'
    }).addTo(this.map);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º popup —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ–≥–º–µ–Ω—Ç–µ
    const center = this.getPolylineCenter(latLngCoords);
    this.selectedSegmentPopup = L.popup()
      .setLatLng(center)
      .setContent(
        `
        <div style="text-align: center;">
          <strong>üéØ –û–±—Ä–∞–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç</strong><br>
          <small>üìè –î–æ–≤–∂–∏–Ω–∞: ${Math.round(calculatedSegment.distance_meters)} –º</small><br>
          <small>üõ£Ô∏è ${calculatedSegment.street_name}</small>
        </div>
      `
      )
      .openOn(this.map);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
   */
  clearSelectedSegment() {
    if (this.selectedSegmentLayer && this.map) {
      this.map.removeLayer(this.selectedSegmentLayer);
      this.selectedSegmentLayer = null;
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º popup —Å–µ–≥–º–µ–Ω—Ç–∞ –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
    if (this.selectedSegmentPopup && this.map) {
      this.map.closePopup(this.selectedSegmentPopup);
      this.selectedSegmentPopup = null;
    }
  }

  // ===== –£–¢–ò–õ–ò–¢–´ =====

  /**
   * –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–æ–¥–≥–æ–Ω–∫–∞ –∫–∞—Ä—Ç—ã –ø–æ–¥ —Å–µ–≥–º–µ–Ω—Ç—ã —É–ª–∏—Ü—ã
   */
  fitBoundsForSegments(segments, options = {}) {
    if (!this.isMapReady() || !segments || segments.length === 0) return;

    try {
      const bounds = L.latLngBounds();
      let totalPoints = 0;

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–µ–≥–º–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
      segments.forEach(segment => {
        if (Array.isArray(segment) && segment.length >= 2) {
          segment.forEach(coord => {
            if (Array.isArray(coord) && coord.length >= 2) {
              bounds.extend([coord[0], coord[1]]);
              totalPoints++;
            }
          });
        }
      });

      if (bounds.isValid() && totalPoints > 0) {
        // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        const enhancedOptions = {
          padding: segments.length > 10 ? [50, 50] : [30, 30],
          maxZoom: segments.length > 5 ? 15 : 16,
          animate: true,
          duration: 0.8,
          ...options
        };

        this.map.fitBounds(bounds, enhancedOptions);
      } else {
        console.warn('‚ö†Ô∏è MapService: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤');
      }
    } catch (error) {
      console.error('MapService: –û—à–∏–±–∫–∞ —Ü–µ–Ω—Ç—Ä–æ–≤–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤', error);
    }
  }

  /**
   * –ü–æ–¥–≥–æ–Ω–∫–∞ –∫–∞—Ä—Ç—ã –ø–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
   */
  fitBounds(coordinates, options = { padding: [20, 20] }) {
    if (!this.isMapReady() || !coordinates || coordinates.length === 0) return;

    try {
      // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–æ—á–∫–∏
      const bounds = L.latLngBounds();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ
      coordinates.forEach(coord => {
        if (Array.isArray(coord) && coord.length >= 2) {
          // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [lat, lng] –∏–ª–∏ [lng, lat]
          if (typeof coord[0] === 'number' && typeof coord[1] === 'number') {
            bounds.extend([coord[0], coord[1]]);
          }
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥—Ä–∞–Ω–∏—Ü—ã –≤–∞–ª–∏–¥–Ω—ã
      if (bounds.isValid()) {
        // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å—Ç—É–ø–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —Ü–µ–Ω—Ç—Ä–æ–≤–∫–∏
        const enhancedOptions = {
          padding: [30, 30], // –ë–æ–ª—å—à–µ –æ—Ç—Å—Ç—É–ø—ã
          maxZoom: 16, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∑—É–º –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±–∑–æ—Ä–∞
          ...options
        };

        this.map.fitBounds(bounds, enhancedOptions);
      } else {
        console.warn('‚ö†Ô∏è MapService: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç', coordinates);
      }
    } catch (error) {
      console.error('MapService: –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–∞–Ω–∏—Ü', error);
    }
  }

  /**
   * –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
   */
  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏ –∑—É–º–∞ –∫–∞—Ä—Ç—ã
   * @param {Array} center - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ [lat, lng]
   * @param {number} zoom - –£—Ä–æ–≤–µ–Ω—å –∑—É–º–∞
   * @param {Object} options - –û–ø—Ü–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
   */
  setView(center, zoom = MAP_CONFIG.DEFAULT_ZOOM, options = {}) {
    if (!this.isMapReady()) return;

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    const defaultOptions = {
      animate: true,
      duration: 0.25 // –ë—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è 250ms
    };

    this.map.setView(center, zoom, { ...defaultOptions, ...options });
  }

  /**
   * –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è)
   */
  setViewInstant(center, zoom = MAP_CONFIG.DEFAULT_ZOOM) {
    this.setView(center, zoom, {
      animate: false,
      duration: 0
    });
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –ø–æ–ª–∏–ª–∏–Ω–∏–∏
   */
  getPolylineCenter(coordinates) {
    if (coordinates.length === 0) return [0, 0];

    let totalLat = 0;
    let totalLng = 0;

    for (const coord of coordinates) {
      totalLat += coord[0];
      totalLng += coord[1];
    }

    return [totalLat / coordinates.length, totalLng / coordinates.length];
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
   */
  formatDateTime(dateStr) {
    if (!dateStr) return '';

    try {
      const date = new Date(dateStr);
      return date.toLocaleString('uk-UA', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch {
      return dateStr;
    }
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞
   */
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const mapService = new MapService();

mapService.getCurrentPoint = function () {
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–∏–∫–Ω—É—Ç—ã–π –º–∞—Ä–∫–µ—Ä –∏–ª–∏ —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã
  if (this.lastClickedPoint) {
    return this.lastClickedPoint;
  }
  if (this.isMapReady()) {
    const center = this.map.getCenter();
    return { lat: center.lat, lng: center.lng };
  }
  return null;
};

export default mapService;
